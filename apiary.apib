FORMAT: 1A


# Superdesk API


Superdesk is an open source end-to-end news creation, production, curation, distribution and publishing platform developed and maintained 
by Sourcefabric with the sole purpose of making the best possible software for journalism. 

This is the offical documentation of Superdesk API used by Superdesk application. It features all the resources to 
 - manage a newsroom (i.e. users, desks, stages etc)
 - manage stories (i.e. templates, stories, multimedia etc)
 - manage distribution (i.e. subscribers, filters, destinations etc) 

---

## Before You Begin

The base URI for all requests is http://{{host}/api where host will be the host address where the server runs.

To run the server locally please check [Superdesk](https://github.com/superdesk/superdesk) repo for all the information

---

## Features

Below is a list of some of the main features that any Superdesk APIs can expose. 

 - (Filtering)[https://docs.python-eve.org/en/stable/features.html#filtering]
 - (Sorting)[https://docs.python-eve.org/en/stable/features.html#sorting]
 - (Pagination)[https://docs.python-eve.org/en/stable/features.html#pagination]
 - (HATEOAS)[https://docs.python-eve.org/en/stable/features.html#hateoas]

---

## PATCH and DELETE actions

Patch and Delte actions will require a header `If-Match` with the _etag_ value of the resource


# Group Authentication

<!-- include(endpoints/configuration/auth.apib) -->
    
# Group All Resources

List of resources related to questions in the API.

## All Resources [/]

List available resources.

### List All Resources [GET]

+ Response 200 (application/json)

        {
        "_links": {
            "child": [
                {
                    "href": "published",
                    "title": "published"
                },
                {
                    "href": "filter_conditions",
                    "title": "filter_conditions"
                },
                {
                    "href": "content_filters",
                    "title": "content_filters"
                },
                {
                    "href": "archive/<item_id>/broadcast",
                    "title": "archive_broadcast"
                },
                {
                    "href": "picture_crop",
                    "title": "picture_crop"
                },
                {
                    "href": "upload",
                    "title": "upload"
                },
                {
                    "href": "events",
                    "title": "events"
                },
                {
                    "href": "roles",
                    "title": "roles"
                },
                {
                    "href": "archive/<item>/comments",
                    "title": "archive/<path:item>/comments"
                },
                {
                    "href": "products/test",
                    "title": "product_tests"
                },
                {
                    "href": "planning/unspike",
                    "title": "planning_unspike"
                },
                {
                    "href": "archive/kill",
                    "title": "archive_kill"
                },
                {
                    "href": "desks",
                    "title": "desks"
                },
                {
                    "href": "assignments_history",
                    "title": "assignments_history"
                },
                {
                    "href": "events_history",
                    "title": "events_history"
                },
                {
                    "href": "vocabularies",
                    "title": "vocabularies"
                },
                {
                    "href": "archive/takedown",
                    "title": "archive_takedown"
                },
                {
                    "href": "feed_parsers_allowed",
                    "title": "feed_parsers_allowed"
                },
                {
                    "href": "feeding_services_allowed",
                    "title": "feeding_services_allowed"
                },
                {
                    "href": "planning_article_export",
                    "title": "planning_article_export"
                },
                {
                    "href": "planning_history",
                    "title": "planning_history"
                },
                {
                    "href": "privileges",
                    "title": "privileges"
                },
                {
                    "href": "events_template",
                    "title": "events_template"
                },
                {
                    "href": "dictionaries",
                    "title": "dictionaries"
                },
                {
                    "href": "archive/unspike",
                    "title": "archive_unspike"
                },
                {
                    "href": "planning/spike",
                    "title": "planning_spike"
                },
                {
                    "href": "events/post",
                    "title": "events_post"
                },
                {
                    "href": "search",
                    "title": "search"
                },
                {
                    "href": "events/cancel",
                    "title": "events_cancel"
                },
                {
                    "href": "saved_searches",
                    "title": "saved_searches"
                },
                {
                    "href": "users/<user_id>/desks",
                    "title": "user_desks"
                },
                {
                    "href": "planning/<item_id>/lock",
                    "title": "planning_lock"
                },
                {
                    "href": "attachments",
                    "title": "attachments"
                },
                {
                    "href": "change_user_password",
                    "title": "change_user_password"
                },
                {
                    "href": "users",
                    "title": "users"
                },
                {
                    "href": "assignments/<item_id>/lock",
                    "title": "assignments_lock"
                },
                {
                    "href": "planning_export_templates",
                    "title": "planning_export_templates"
                },
                {
                    "href": "contacts",
                    "title": "contacts"
                },
                {
                    "href": "archive_history",
                    "title": "archive_history"
                },
                {
                    "href": "archive/correct",
                    "title": "archive_correct"
                },
                {
                    "href": "events/unspike",
                    "title": "events_unspike"
                },
                {
                    "href": "search_capi",
                    "title": "search_capi"
                },
                {
                    "href": "all_saved_searches",
                    "title": "all_saved_searches"
                },
                {
                    "href": "search_providers",
                    "title": "search_providers"
                },
                {
                    "href": "events_files",
                    "title": "events_files"
                },
                {
                    "href": "assignments/unlink",
                    "title": "assignments_unlink"
                },
                {
                    "href": "client_config",
                    "title": "client_config"
                },
                {
                    "href": "spikes",
                    "title": "spikes"
                },
                {
                    "href": "validators",
                    "title": "validators"
                },
                {
                    "href": "archive/translate",
                    "title": "translate"
                },
                {
                    "href": "events/<item_id>/duplicate",
                    "title": "events_duplicate"
                },
                {
                    "href": "assignments/content",
                    "title": "assignments_content"
                },
                {
                    "href": "planning_search",
                    "title": "planning_search"
                },
                {
                    "href": "reset_user_password",
                    "title": "reset_user_password"
                },
                {
                    "href": "archive/<original_id>/rewrite",
                    "title": "archive_rewrite"
                },
                {
                    "href": "desks/<desk_id>/sluglines",
                    "title": "desks/<regex(\"[a-f0-9]{24}\"):desk_id>/sluglines"
                },
                {
                    "href": "planning_featured",
                    "title": "planning_featured"
                },
                {
                    "href": "planning_featured_unlock",
                    "title": "planning_featured_unlock"
                },
                {
                    "href": "assignments/complete",
                    "title": "assignments_complete"
                },
                {
                    "href": "content_templates",
                    "title": "content_templates"
                },
                {
                    "href": "archived",
                    "title": "archived"
                },
                {
                    "href": "workspaces",
                    "title": "workspaces"
                },
                {
                    "href": "marked_for_desks",
                    "title": "marked_for_desks"
                },
                {
                    "href": "filter_conditions/parameters",
                    "title": "filter_conditions/parameters"
                },
                {
                    "href": "content_types",
                    "title": "content_types"
                },
                {
                    "href": "events/<item_id>/unlock",
                    "title": "events_unlock"
                },
                {
                    "href": "recent_events_template",
                    "title": "recent_events_template"
                },
                {
                    "href": "ingest",
                    "title": "ingest"
                },
                {
                    "href": "planning/cancel",
                    "title": "planning_cancel"
                },
                {
                    "href": "agenda",
                    "title": "agenda"
                },
                {
                    "href": "item_comments",
                    "title": "item_comments"
                },
                {
                    "href": "closed_desks",
                    "title": "closed_desks"
                },
                {
                    "href": "processed_items_report",
                    "title": "processed_items_report"
                },
                {
                    "href": "workqueue",
                    "title": "workqueue"
                },
                {
                    "href": "highlights",
                    "title": "highlights"
                },
                {
                    "href": "internal_destinations",
                    "title": "internal_destinations"
                },
                {
                    "href": "planning_types",
                    "title": "planning_types"
                },
                {
                    "href": "contacts/organisations",
                    "title": "contacts_organisations"
                },
                {
                    "href": "picture_renditions",
                    "title": "picture_renditions"
                },
                {
                    "href": "content_quota_report",
                    "title": "content_quota_report"
                },
                {
                    "href": "events/postpone",
                    "title": "events_postpone"
                },
                {
                    "href": "events/update_time",
                    "title": "events_update_time"
                },
                {
                    "href": "planning/<item_id>/unlock",
                    "title": "planning_unlock"
                },
                {
                    "href": "allowed_values",
                    "title": "allowed_values"
                },
                {
                    "href": "events/update_repetitions",
                    "title": "events_update_repetitions"
                },
                {
                    "href": "subscriber_token",
                    "title": "subscriber_token"
                },
                {
                    "href": "stages",
                    "title": "stages"
                },
                {
                    "href": "planning_autosave",
                    "title": "planning_autosave"
                },
                {
                    "href": "planning",
                    "title": "planning"
                },
                {
                    "href": "media_references",
                    "title": "media_references"
                },
                {
                    "href": "io_errors",
                    "title": "io_errors"
                },
                {
                    "href": "subscribers",
                    "title": "subscribers"
                },
                {
                    "href": "activity_report",
                    "title": "activity_report"
                },
                {
                    "href": "archive",
                    "title": "archive"
                },
                {
                    "href": "archive/<guid>/duplicate",
                    "title": "duplicate"
                },
                {
                    "href": "ingest/<id>/fetch",
                    "title": "fetch"
                },
                {
                    "href": "content_templates_apply",
                    "title": "content_templates_apply"
                },
                {
                    "href": "events/reschedule",
                    "title": "events_reschedule"
                },
                {
                    "href": "download",
                    "title": "download"
                },
                {
                    "href": "saved_searches/<saved_search_id>/items",
                    "title": "saved_search_items"
                },
                {
                    "href": "suggestions/<item_id>",
                    "title": "suggestions/<regex(\"[\\w,.:_-]+\"):item_id>"
                },
                {
                    "href": "auth",
                    "title": "auth"
                },
                {
                    "href": "activity",
                    "title": "activity"
                },
                {
                    "href": "generate_highlights",
                    "title": "generate_highlights"
                },
                {
                    "href": "events_planning_search",
                    "title": "events_planning_search"
                },
                {
                    "href": "search_providers_proxy",
                    "title": "search_providers_proxy"
                },
                {
                    "href": "published_package_items",
                    "title": "published_package_items"
                },
                {
                    "href": "events/<item_id>/lock",
                    "title": "events_lock"
                },
                {
                    "href": "archive/<item_id>/lock",
                    "title": "archive_lock"
                },
                {
                    "href": "event_autosave",
                    "title": "event_autosave"
                },
                {
                    "href": "archive/<original_id>/resend",
                    "title": "archive_resend"
                },
                {
                    "href": "backend_meta",
                    "title": "backend_meta"
                },
                {
                    "href": "planning/post",
                    "title": "planning_post"
                },
                {
                    "href": "events_planning_filters",
                    "title": "events_planning_filters"
                },
                {
                    "href": "auth_db",
                    "title": "auth_db"
                },
                {
                    "href": "saved_activity_reports",
                    "title": "saved_activity_reports"
                },
                {
                    "href": "assignments/revert",
                    "title": "assignments_revert"
                },
                {
                    "href": "comments",
                    "title": "comments"
                },
                {
                    "href": "routing_schemes",
                    "title": "routing_schemes"
                },
                {
                    "href": "items",
                    "title": "items"
                },
                {
                    "href": "planning_download",
                    "title": "planning_download"
                },
                {
                    "href": "media_editor",
                    "title": "media_editor"
                },
                {
                    "href": "preferences",
                    "title": "preferences"
                },
                {
                    "href": "archive/<guid>/move",
                    "title": "move"
                },
                {
                    "href": "archive/publish",
                    "title": "archive_publish"
                },
                {
                    "href": "locations",
                    "title": "locations"
                },
                {
                    "href": "users/<original_creator>/content",
                    "title": "user_content"
                },
                {
                    "href": "archive_autosave",
                    "title": "archive_autosave"
                },
                {
                    "href": "archive/spike",
                    "title": "archive_spike"
                },
                {
                    "href": "published_planning",
                    "title": "published_planning"
                },
                {
                    "href": "planning_featured_lock",
                    "title": "planning_featured_lock"
                },
                {
                    "href": "export",
                    "title": "export"
                },
                {
                    "href": "ingest_providers",
                    "title": "ingest_providers"
                },
                {
                    "href": "audit",
                    "title": "audit"
                },
                {
                    "href": "marked_for_highlights",
                    "title": "marked_for_highlights"
                },
                {
                    "href": "users/<user_id>/sessions",
                    "title": "clear_sessions"
                },
                {
                    "href": "validate",
                    "title": "validate"
                },
                {
                    "href": "rule_sets",
                    "title": "rule_sets"
                },
                {
                    "href": "products",
                    "title": "products"
                },
                {
                    "href": "content_filters/test",
                    "title": "content_filter_tests"
                },
                {
                    "href": "config",
                    "title": "config"
                },
                {
                    "href": "tasks",
                    "title": "tasks"
                },
                {
                    "href": "webhook",
                    "title": "webhook"
                },
                {
                    "href": "archive/<guid>/copy",
                    "title": "copy"
                },
                {
                    "href": "track_activity_report",
                    "title": "track_activity_report"
                },
                {
                    "href": "concept_items",
                    "title": "concept_items"
                },
                {
                    "href": "publish_queue",
                    "title": "publish_queue"
                },
                {
                    "href": "spellcheck",
                    "title": "spellcheck"
                },
                {
                    "href": "planning_files",
                    "title": "planning_files"
                },
                {
                    "href": "assignments/link",
                    "title": "assignments_link"
                },
                {
                    "href": "formatters",
                    "title": "formatters"
                },
                {
                    "href": "planning/<item_id>/duplicate",
                    "title": "planning_duplicate"
                },
                {
                    "href": "sessions",
                    "title": "sessions"
                },
                {
                    "href": "auth_xmpp",
                    "title": "auth_xmpp"
                },
                {
                    "href": "events/spike",
                    "title": "events_spike"
                },
                {
                    "href": "content_api",
                    "title": "content_api"
                },
                {
                    "href": "planning_validator",
                    "title": "planning_validator"
                },
                {
                    "href": "assignments",
                    "title": "assignments"
                },
                {
                    "href": "search_providers_allowed",
                    "title": "search_providers_allowed"
                },
                {
                    "href": "macros",
                    "title": "macros"
                },
                {
                    "href": "assignments/<item_id>/unlock",
                    "title": "assignments_unlock"
                },
                {
                    "href": "archive/<item_id>/unlock",
                    "title": "archive_unlock"
                }
            ]
        }
        }

# Group Ingest

List of resources related to ingest in the API.

## Ingest Provider Collection [/ingest_providers]

Ingest providers defines the model for an ingest 

### List All Ingest Providers [GET]

+ Response 200 (application/json)

        {
            "_meta": {
                "total": 5,
                "page": 1,
                "max_results": 25
            },
            "_links": {
                "self": {
                    "href": "ingest_providers",
                    "title": "ingest_providers"
                },
                "parent": {
                    "href": "/",
                    "title": "home"
                }
            },
            "_items": [
                {
                    "notifications": {
                        "on_open": true,
                        "on_close": true,
                        "on_error": true,
                        "on_update": true
                    },
                    "_links": {
                        "self": {
                            "href": "ingest_providers/566ea626b611406b0de30e74",
                            "title": "Ingest_provider"
                        }
                    },
                    "allow_remove_ingested": false,
                    "content_types": [
                        "text",
                        "preformatted",
                        "audio",
                        "video",
                        "picture",
                        "graphic",
                        "composite"
                    ],
                    "_etag": "d9e0d5f2fd3d2297820d1a55d65ff6c88064e4f8",
                    "critical_errors": {
                        "1001": false,
                        "2000": true
                    },
                    "_created": "2016-08-21T12:20:38+0000",
                    "idle_time": {
                        "minutes": 0,
                        "hours": 0
                    },
                    "last_item_update": "2017-05-01T12:39:21+0000",
                    "_id": "566ea626b611406b0de30e74",
                    "feeding_service": "rss",
                    "last_updated": "2017-05-01T12:39:20+0000",
                    "last_closed": {
                        "closed_by": "57b99db91d41c844b98d6832",
                        "closed_at": "2017-05-01T12:39:39+0000",
                        "message": ""
                    },
                    "content_expiry": 2880,
                    "config": {
                        "username": "user",
                        "password": "password",
                        "field_aliases": [],
                        "url": "http://www.forbes.com/"
                    },
                    "last_opened": {
                        "opened_by": "57b99db91d41c844b98d6832",
                        "opened_at": "2017-05-01T12:39:14+0000"
                    },
                    "name": "Forbes RSS feed",
                    "_updated": "2017-05-01T12:39:39+0000",
                    "update_schedule": {
                        "minutes": 5,
                        "seconds": 0
                    },
                    "is_closed": true,
                    "source": "Forbes"
                }
            ]
        }


### Create a new Ingest Provider [POST]

You can create an ingest provider by providing a JSON object
containing a question and a collection of answers in the form of choices.

+ notifications (object) - Events that system will send notifications
+ critical_errors (object) - List of errors will cause to close the provider
+ feeding_service (string) - Type of the feeding feeding_service
+ config (object) - Connection settings to ingest source
+ update_schedule (object) - Interval between pull events
+ content_expiry (number) - ttl for ingested items in minutes
+ content_types (array[string]) - List of content types of items to ingest from provider
+ name (string) - provider name
+ source (string) - name of the source
+ is_closed (boolean) - 


+ Request (application/json)

        {
            "notifications": {
                "on_open": true,
                "on_close": true,
                "on_error": true,
                "on_update": true
            },
            "critical_errors": {
                "1001": false,
                "2000": true
            },
            "feeding_service": "rss",
            "allow_remove_ingested": false,
            "config": {
                "username": "user",
                "password": "password",
                "field_aliases": [],
                "url": "http://www.forbes.com/real-time/feed2/"
            },
            "update_schedule": {
                "minutes": 5,
                "seconds": 0
            },
            "content_expiry": 2880,
            "content_types": [
                "text",
                "preformatted",
                "audio",
                "video",
                "picture",
                "graphic",
                "composite"
            ],
            "name": "New feed",
            "source": "Forbes",
            "is_closed": true
        }


+ Response 201 (application/json)

    + Body

            {
                "notifications": {
                    "on_open": true,
                    "on_close": true,
                    "on_error": true,
                    "on_update": true
                },
                "_links": {
                    "self": {
                        "href": "ingest_providers/5d1345b71d41c8242e0c04bb",
                        "title": "Ingest_provider"
                    }
                },
                "content_types": [
                    "text",
                    "preformatted",
                    "audio",
                    "video",
                    "picture",
                    "graphic",
                    "composite"
                ],
                "_etag": "a1aa592d2bb1d0577f8a0d92a046cf7fc7a5cd4c",
                "critical_errors": {
                    "1001": false,
                    "2000": true
                },
                "_created": "2019-06-26T10:15:19+0000",
                "idle_time": {
                    "minutes": 0,
                    "hours": 0
                },
                "last_item_update": "2017-05-01T12:39:21+0000",
                "_status": "OK",
                "_id": "5d1345b71d41c8242e0c04bb",
                "feeding_service": "rss",
                "last_updated": "2017-05-01T12:39:20+0000",
                "content_expiry": 2880,
                "allow_remove_ingested": false,
                "name": "New feed",
                "_updated": "2019-06-26T10:15:19+0000",
                "update_schedule": {
                    "minutes": 5,
                    "seconds": 0
                },
                "config": {
                    "password": "password",
                    "username": "user",
                    "url": "http://www.forbes.com/",
                    "field_aliases": []
                },
                "is_closed": true,
                "source": "Forbes"
            }

                
## Ingest Provider [/ingest_providers/{ingest_provider_id}]

+ Parameters
    + ingest_provider_id (string) - ID of the Question in the form of a string

### View an Ingest Provider Detail [GET]    

+ Response 200 (application/json)

        {
            "notifications": {
                "on_open": true,
                "on_close": true,
                "on_error": true,
                "on_update": true
            },
            "_links": {
                "self": {
                    "href": "ingest_providers/566ea626b611406b0de30e74",
                    "title": "Ingest_provider"
                },
                "collection": {
                    "href": "ingest_providers",
                    "title": "ingest_providers"
                },
                "parent": {
                    "href": "/",
                    "title": "home"
                }
            },
            "_etag": "d9e0d5f2fd3d2297820d1a55d65ff6c88064e4f8",
            "critical_errors": {
                "1001": false,
                "2000": true
            },
            "last_closed": {
                "closed_by": "57b99db91d41c844b98d6832",
                "closed_at": "2017-05-01T12:39:39+0000",
                "message": ""
            },
            "last_item_update": "2017-05-01T12:39:21+0000",
            "_id": "566ea626b611406b0de30e74",
            "feeding_service": "rss",
            "allow_remove_ingested": false,
            "config": {
                "username": "user",
                "password": "password",
                "field_aliases": [],
                "url": "http://www.forbes.com/"
            },
            "update_schedule": {
                "minutes": 5,
                "seconds": 0
            },
            "_created": "2016-08-21T12:20:38+0000",
            "idle_time": {
                "minutes": 0,
                "hours": 0
            },
            "_type": "ingest_providers",
            "last_updated": "2017-05-01T12:39:20+0000",
            "content_expiry": 2880,
            "content_types": [
                "text",
                "preformatted",
                "audio",
                "video",
                "picture",
                "graphic",
                "composite"
            ],
            "last_opened": {
                "opened_by": "57b99db91d41c844b98d6832",
                "opened_at": "2017-05-01T12:39:14+0000"
            },
            "name": "Forbes RSS feed",
            "_updated": "2017-05-01T12:39:39+0000",
            "source": "Forbes",
            "is_closed": true
        }

## Update an Ingest Provider [PATCH]

You can update an ingest provider by providing a JSON object
for any of the field combinations


+ Request (application/json)

        {
            "is_closed": false
        }


+ Response 201 (application/json)

    + Body

            {
                "notifications": {
                    "on_open": true,
                    "on_close": true,
                    "on_error": true,
                    "on_update": true
                },
                "_links": {
                    "self": {
                        "href": "ingest_providers/5d1345b71d41c8242e0c04bb",
                        "title": "Ingest_provider"
                    }
                },
                "content_types": [
                    "text",
                    "preformatted",
                    "audio",
                    "video",
                    "picture",
                    "graphic",
                    "composite"
                ],
                "_etag": "a1aa592d2bb1d0577f8a0d92a046cf7fc7a5cd4c",
                "critical_errors": {
                    "1001": false,
                    "2000": true
                },
                "_created": "2019-06-26T10:15:19+0000",
                "idle_time": {
                    "minutes": 0,
                    "hours": 0
                },
                "last_item_update": "2017-05-01T12:39:21+0000",
                "_status": "OK",
                "_id": "5d1345b71d41c8242e0c04bb",
                "feeding_service": "rss",
                "last_updated": "2017-05-01T12:39:20+0000",
                "content_expiry": 2880,
                "allow_remove_ingested": false,
                "name": "New feed",
                "_updated": "2019-06-26T10:15:19+0000",
                "update_schedule": {
                    "minutes": 5,
                    "seconds": 0
                },
                "config": {
                    "password": "password",
                    "username": "user",
                    "url": "http://www.forbes.com/",
                    "field_aliases": []
                },
                "is_closed": false,
                "source": "Forbes"
            }

## Delete an Ingest Provider [DELETE]      

+ Response 204



# Group User Management

## User [/users/{id}]

A single User resource.

+ Parameters
    + id (string) - User id.

+ Model (application/json) 

        {
            "user_preferences": {
                "feature:preview": {
                    "category": "feature",
                    "type": "bool",
                    "default": false,
                    "privileges": [
                        "feature_preview"
                    ],
                    "enabled": false,
                    "label": "Enable Feature Preview"
                },
                "email:notification": {
                    "category": "notifications",
                    "enabled": true,
                    "type": "bool",
                    "label": "Send notifications via email",
                    "default": true
                },
                "destination:active": {},
                "article:default:place": {
                    "category": "article_defaults",
                    "type": "list",
                    "place": [],
                    "label": "Place"
                },
                "workqueue:items": {
                    "items": []
                },
                "categories:preferred": {
                    "category": "categories",
                    "type": "dict",
                    "label": "Preferred Categories",
                    "selected": {}
                },
                "spellchecker:status": {
                    "enabled": true,
                    "type": "bool",
                    "default": true
                },
                "workspace:active": {
                    "type": "string",
                    "workspace": ""
                },
                "agg:view": {
                    "active": {}
                },
                "dashboard:ingest": {
                    "providers": []
                },
                "templates:recent": {},
                "dateline:located": {
                    "category": "article_defaults",
                    "type": "dict",
                    "label": "Located"
                },
                "archive:view": {
                    "category": "archive",
                    "type": "string",
                    "view": "mgrid",
                    "default": "mgrid",
                    "allowed": [
                        "mgrid",
                        "compact"
                    ],
                    "label": "Users archive view format"
                },
                "editor:theme": {
                    "type": "string",
                    "theme": ""
                }
            },
            "username": "tbarras",
            "dateline_source": "Short name for your organisation",
            "user_type": "user",
            "sign_off": "TB",
            "email": "user+7@superdesk.org",
            "role": "54e655e31024542de76d6636",
            "needs_activation": false,
            "display_name": "Tiera Barras",
            "invisible_stages": [
                "58c132ae1d41c864c216bc01",
                "58c132ae1d41c864c216bc02"
            ],
            "last_name": "Barras",
            "is_enabled": true,
            "is_active": true
        }

### Retrieve a User [GET]

"readonly" attribute is included only if AD is enabled.

+ Request (application/json)

+ Response 200

    [User][]

+ Response 404

### Update User [PATCH]

+ Request (application/json)

    + Headers
    
            If-Match: xyz
    
    + Body

            {"last_name": "Baz"}

+ Response 200 (application/json)

        {"_status": "OK"}

+ Response 403

### Hard Delete a User [DELETE]

+ Request

    + Headers
    
            If-Match: xyz

+ Response 204

## User Search [/users{?page,max_results,where,sort}]

### List all Users [GET]

"readonly" attribute is included only if AD is enabled.

+ Parameters
    + page = `0`(optional, integer) ... Page number
    + max_results = `25`(optional, integer) ... Number of users to be returned
    + where (optional, object) ... Filtering
    + sort (optional, object) ... Sorting

+ Response 200 (application/json)
        
        {
            "_items": [
                {
                    "_links": {"self": {"href": "/users/2"}},
                    "_id": "2",
                    "email": "john.doe@email.com",
                    "first_name": "John",
                    "display_name": "John Doe",
                    "last_name": "Doe",
                    "username": "john",
                    "phone_number": "0123456789",
                    "_created": "2014-02-18T14:42:16Z",
                    "_updated": "2014-02-18T14:42:16Z",
                    "picture_url": "http://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50",
                    "_etag": "xyz",
                    "_readonly": ["username", "display_name", "password", "email", "phone", "first_name", "last_name"]
                },
                {
                    "_links": {"self": {"href": "/users/3"}},
                    "_id": "3",
                    "email": "joe.hammer@email.com",
                    "first_name": "Joe",
                    "display_name": "Joe Hammer",
                    "last_name": "Hammer",
                    "username": "joe",
                    "phone_number": "0223456789",
                    "_created": "2014-02-18T14:43:27Z",
                    "_updated": "2014-02-18T14:43:27Z",
                    "picture_url": "http://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50",
                    "_etag": "xyz",
                    "_readonly": ["username", "display_name", "password", "email", "phone", "first_name", "last_name"]
                }
            ]
        }

## User collection [/users]

### Create user [POST]

+ Request (application/json)

        {
            "first_name": "John",
            "last_name": "Doe",
            "username": "john",
            "email": "john.doe@email.com",
            "password": "a3r546465676bgyhyyehy",
            "phone_number": "0223456789"
        }

+ Response 201 (application/json)

        {
            "_links": {"self": {"href": "/users/5"}},
            "_status": "OK",
            "_etag": "xyz"
        }

+ Response 400 (application/json)

        {
            "_status": "ERR",
            "_issues": {
                "username": {
                    "unique": {
                        "msg": "There is already an active user with this name"
                    }
                },
                "email": {
                    "unique": { "msg": "Unique constraint failed" }
                },
                "email": {
                    "format": { "msg": "Invalid EMail" }
                },
                "phone": {
                    "format": {
                        "msg": "Invalid phone number format"
                        "example": "+123123456789 or 0123456789 or 123456789"
                    }
                },
                "password": {
                    "required": { "msg": "Mandatory value is missing" }
                }
            }
        }


## Import Profile from Active Directory [/import_profile]

This will be exposed if Active Directory is enabled.

### Import User Profile from Active Directory [POST]

+ Request (application/json)

        {
            "username": "admin",
            "password": "admin",
            "profile_to_import": "sduser"
        }

+ Response 201 (application/json)

        {
           "_status": "OK",
           "_id": "5449e53fc3747c105fa69f53",
           "_etag": "5cc244e4acb76505127cd1555ee13d93e0f85e39",
           "first_name": "User",
           "last_name": "SD",
           "display_name": "SD User",
           "is_active": true,
           "_created": "2014-10-24T05:35:54+0000",
           "_updated": "2014-10-24T05:35:54+0000",
           "user_type": "user",
           "username": "sduser",
           "phone": "+61 2 9322 8598",
           "email": "sduser@sourcefabric.org",
           "_links": {
              "self": {
                 "href": "/import_profile/5449e53fc3747c105fa69f53",
                 "title": "Import_profile"
               }
           }
        }

+ Response 404

        {}

## Privileges Collection [/privileges]

+ Model (application/json)

        {
            "items": [
                {"name": "ingest", "label": "Ingest", "description": "Fetch content from ingest."},
                {"name": "users", "label": "Users", "description": "Manage users and user roles."}
            ]
        }

### List available privileges in the system [GET]

+ Response 200

    [Privileges Collection][]

# Group Roles Management

## Roles [/roles/{id}]

A single Roles resource.

+ Parameters
    + id (string) ... Roles id.

+ Model (application/json) 

        {
            "name": "Copy Taster",
            "description": "Description of role",
            "privileges": {
                "ingest": 1,
                "users": 0
            }
        }

### Retrieve A Role [GET]

+ Response 200 (application/json)

        {
            "description": "Role description",
            "_type": "roles",
            "_updated": "2016-08-21T12:20:08+0000",
            "_etag": "d30f5e2405589b0d4ebb637a88761405cea38cb3",
            "privileges": {
                "fetch": 1
            },
            "_created": "2016-08-21T12:20:08+0000",
            "name": "Copytaker",
            "_id": "54e686811024542de76d663a",
            "_links": {
                "self": {
                    "href": "roles/54e686811024542de76d663a",
                    "title": "Role"
                },
                "collection": {
                    "href": "roles",
                    "title": "roles"
                },
                "parent": {
                    "href": "/",
                    "title": "home"
                }
            }
        }

+ Response 404

### Update Role [PATCH]

+ Request (application/json)

    + Headers
    
            If-Match: xyz
    
    + Body

            {"name": "Copy Taster"}

+ Response 200 (application/json)

        {
            "privileges": {
                "users": 1
            },
            "_links": {
                "self": {
                    "title": "Role",
                    "href": "/roles/541061621d41c8ac80ff3b6e"
                }
            },
            "_id": "541061621d41c8ac80ff3b6e",
            "_created": "2014-09-10T14:34:10+0000",
            "_status": "OK",
            "name": "Copy Tester",
            "description": "Role description",
            "_updated": "2014-09-10T14:44:36+0000"
        }


+ Response 403

### Hard Delete a Role [DELETE]

+ Request

    + Headers
    
            If-Match: xyz

+ Response 200

## Roles Search [/roles{?page,max_results,where,sort}]

### List All Roles [GET]

+ Parameters
    + page = `0`(optional, integer) ... Page number
    + max_results = `25`(optional, integer) ... Number of roles to be returned
    + where (optional, object) ... Filtering
    + sort (optional, object) ... Sorting

+ Response 200 (application/json)

        {
            "_meta": {
                "max_results": 25,
                "page": 1,
                "total": 3
            },
            "_items": [
                {
                    "name": "Editor",
                    "description": "Role description",
                    "_links": {
                        "self": {
                            "title": "Role",
                            "href": "/roles/5410641c1d41c8ac80ff3b73"
                        }
                    },
                    "_updated": "2014-09-10T14:45:48+0000",
                    "_id": "5410641c1d41c8ac80ff3b73",
                    "_created": "2014-09-10T14:45:48+0000"
                },
                {
                    "_created": "2014-09-10T14:34:10+0000",
                    "_links": {
                        "self": {
                            "title": "Role",
                            "href": "/roles/541061621d41c8ac80ff3b6e"
                        }
                    },
                    "_id": "541061621d41c8ac80ff3b6e",
                    "privileges": {
                        "search": 1
                    },
                    "name": "Copy Tester",
                    "description": "Role description",
                    "_updated": "2014-09-10T14:44:36+0000"
                },
                {
                    "name": "Sub Editor",
                    "description": "Role description",
                    "_links": {
                        "self": {
                            "title": "Role",
                            "href": "/roles/541064241d41c8ac80ff3b75"
                        }
                    },
                    "_updated": "2014-09-10T14:45:56+0000",
                    "_id": "541064241d41c8ac80ff3b75",
                    "_created": "2014-09-10T14:45:56+0000"
                }
            ],
            "_links": {
                "parent": {
                    "title": "home",
                    "href": "/"
                },
                "self": {
                    "title": "roles",
                    "href": "/roles"
                }
            }
        }


## Roles collection [/roles]

### Create A Role [POST]

+ Request (application/json)

        {
            "name": "Sub Editor",
            "description": "Role description",
            "privileges": {"content": 1}
        }

+ Response 201 (application/json)

        {
            "_links": {
                "self": {
                    "title": "Role",
                    "href": "/roles/541061621d41c8ac80ff3b6e"
                }
            },
            "_id": "541061621d41c8ac80ff3b6e",
            "_created": "2014-09-10T14:34:10+0000",
            "_status": "OK",
            "name": "Copy Tester",
            "description": "Role description",
            "_updated": "2014-09-10T14:34:10+0000"
        }

+ Response 400 (application/json)

        {
            "_status": "ERR",
            "_issues": {
                "name": {
                    "unique": {
                        "msg": "There is already a role with this name"
                    }
                }
            }
        }

# Group Preference Management

## Preference [/preferences/{session_id}]

Returns user and session level preferences by given session id

+ Parameters
    + session_id (string) ... Session id.

+ Model (application/json)

        {
            "username": "user2",
            "session_preferences": {
                "desk:last_worked": "",
                "stage:items": [],
                "monitoring:view:session": null,
                "scratchpad:items": [],
                "pinned:items": [],
                "desk:items": []
            },
            "is_enabled": true,
            "user_preferences": {
                "agg:view": {
                    "active": {}
                },
                "templates:recent": {},
                "dashboard:ingest": {
                    "providers": []
                },
                "cvs:preferred_items": {
                    "label": "Prefered CV items",
                    "category": "cvs",
                    "value": {}
                },
                "workqueue:items": {
                    "items": []
                },
                "email:notification": {
                    "enabled": true,
                    "label": "Send notifications via email",
                    "category": "notifications",
                    "default": true,
                    "type": "bool"
                },
                "desks:preferred": {
                    "label": "Preferred Desks",
                    "category": "desks",
                    "selected": {},
                    "type": "dict"
                },
                "dateline:located": {
                    "label": "Located",
                    "category": "article_defaults",
                    "type": "dict"
                },
                "categories:preferred": {
                    "label": "Preferred Categories",
                    "category": "categories",
                    "selected": {},
                    "type": "dict"
                },
                "spellchecker:status": {
                    "enabled": true,
                    "default": true,
                    "type": "bool"
                },
                "desktop:notification": {
                    "enabled": true,
                    "label": "Allow Desktop Notifications",
                    "category": "notifications",
                    "default": false,
                    "type": "bool"
                },
                "editor:theme": {
                    "theme": "",
                    "type": "string"
                },
                "workspace:active": {
                    "workspace": "",
                    "type": "string"
                },
                "destination:active": {},
                "singleline:view": {
                    "enabled": null,
                    "label": "Enable Single Line View",
                    "category": "rows",
                    "default": false,
                    "type": "bool"
                },
                "feature:preview": {
                    "enabled": false,
                    "category": "feature",
                    "type": "bool",
                    "privileges": [
                        "feature_preview"
                    ],
                    "label": "Enable Feature Preview",
                    "default": false
                },
                "monitoring:view": {
                    "category": "monitoring",
                    "type": "string",
                    "label": "Monitoring view",
                    "view": "list",
                    "allowed": [
                        "list",
                        "swimlane"
                    ],
                    "default": "list"
                },
                "archive:view": {
                    "category": "archive",
                    "type": "string",
                    "label": "Users archive view format",
                    "view": "mgrid",
                    "allowed": [
                        "mgrid",
                        "compact"
                    ],
                    "default": "mgrid"
                },
                "contacts:view": {
                    "category": "contacts",
                    "type": "string",
                    "label": "Users contacts view format",
                    "view": "mgrid",
                    "allowed": [
                        "mgrid",
                        "compact"
                    ],
                    "default": "mgrid"
                },
                "article:default:place": {
                    "label": "Place",
                    "place": [],
                    "category": "article_defaults",
                    "type": "list"
                }
            },
            "allowed_actions": [
                {
                    "name": "save",
                    "privileges": [
                        "archive"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "draft",
                        "fetched",
                        "routed",
                        "submitted",
                        "scheduled"
                    ]
                },
                {
                    "name": "move",
                    "privileges": [
                        "archive"
                    ],
                    "exclude_states": [
                        "ingested",
                        "spiked",
                        "on-hold",
                        "published",
                        "scheduled",
                        "killed"
                    ],
                    "include_states": []
                },
                {
                    "name": "spike",
                    "privileges": [
                        "spike"
                    ],
                    "exclude_states": [
                        "spiked",
                        "published",
                        "scheduled",
                        "corrected",
                        "killed"
                    ],
                    "include_states": []
                },
                {
                    "name": "unspike",
                    "privileges": [
                        "unspike"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "spiked"
                    ]
                },
                {
                    "name": "copy",
                    "privileges": [
                        "archive"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "draft"
                    ]
                },
                {
                    "name": "duplicate",
                    "privileges": [
                        "archive",
                        "duplicate"
                    ],
                    "exclude_states": [
                        "spiked",
                        "killed",
                        "recalled"
                    ],
                    "include_states": []
                },
                {
                    "name": "fetch_from_ingest",
                    "privileges": [
                        "ingest",
                        "archive",
                        "fetch"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "ingested"
                    ]
                },
                {
                    "name": "submit_to_desk",
                    "privileges": [
                        "archive",
                        "move"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "draft",
                        "fetched",
                        "routed",
                        "submitted",
                        "in_progress",
                        "published",
                        "scheduled"
                    ]
                },
                {
                    "name": "translate",
                    "privileges": [
                        "archive",
                        "translate"
                    ],
                    "exclude_states": [
                        "spiked",
                        "killed",
                        "recalled"
                    ],
                    "include_states": []
                },
                {
                    "name": "publish",
                    "privileges": [
                        "publish"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "fetched",
                        "routed",
                        "submitted",
                        "in_progress",
                        "scheduled"
                    ]
                },
                {
                    "name": "kill",
                    "privileges": [
                        "kill"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "published",
                        "scheduled",
                        "corrected"
                    ]
                },
                {
                    "name": "correct",
                    "privileges": [
                        "correct"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "published",
                        "corrected"
                    ]
                },
                {
                    "name": "rewrite",
                    "privileges": [
                        "rewrite"
                    ],
                    "exclude_states": [
                        "killed",
                        "spiked",
                        "scheduled"
                    ],
                    "include_states": []
                },
                {
                    "name": "recalled",
                    "privileges": [
                        "takedown"
                    ],
                    "exclude_states": [],
                    "include_states": [
                        "published",
                        "scheduled",
                        "corrected"
                    ]
                }
            ],
            "display_name": "first name2 last name2",
            "sign_off": "fl",
            "active_privileges": {
                "routing_rules": 1,
                "contacts": 1,
                "archive_broadcast": 1,
                "hold": 1,
                "move": 1,
                "view_contacts": 1,
                "rule_sets": 1,
                "internal_destinations": 1,
                "global_saved_searches": 1,
                "mark_for_highlights": 1,
                "archive": 1,
                "concept_items": 1,
                "dictionaries": 1,
                "saved_searches_subscriptions": 1,
                "translate": 1,
                "roles": 1,
                "content_filters": 1,
                "content_type": 1,
                "publish": 1,
                "archived": 1,
                "feeding_services": 1,
                "desks": 1,
                "feed_parsers": 1,
                "takedown": 1,
                "embargo": 1,
                "subscribers": 1,
                "restore": 1,
                "search_capi": 1,
                "search_providers": 1,
                "saved_reports": 1,
                "publishing_performance_report": 1,
                "rewrite": 1,
                "ingest_providers": 1,
                "products": 1,
                "content_export": 1,
                "users": 1,
                "unspike": 1,
                "scheduled_reports": 1,
                "publish_queue": 1,
                "ingest": 1,
                "mark_for_desks": 1,
                "saved_searches": 1,
                "unlock": 1,
                "desk_routing": 1,
                "content_publishing_report": 1,
                "tasks": 1,
                "spike": 1,
                "saved_searches_subscriptions_admin": 1,
                "metadata_uniquename": 1,
                "highlights": 1,
                "global_saved_reports": 1,
                "duplicate": 1,
                "vocabularies": 1,
                "correct": 1,
                "resend": 1,
                "kill": 1,
                "feature_preview": 1,
                "content_templates": 1,
                "fetch": 1
            },
            "first_name": "first name2",
            "role": "5981c6611d41c82dbab9862b",
            "invisible_stages": [
                "58c132ae1d41c864c216bc01",
                "58c132ae1d41c864c216bc02"
            ],
            "user_type": "administrator",
            "email": "a2@a.com",
            "needs_activation": false,
            "last_name": "last name2",
            "is_active": true
        }

### Retrieve a preference [GET]

+ Request (application/json)

+ Response 200

    [Preference][]

+ Response 404


### Update preferences [PATCH]

+ Request (application/json)

    + Headers

            If-Match: xyz

    + Body
    
            {
                "user_preferences": {
                    "email.notification": 1
                }
            }

+ Response 200 (application/json)

        {
            "_status": "OK"
        }

+ Response 403


# Group Session Management

## All Sessions [/sessions{?page,max_results,where,sort}]

### List all Sessions [GET]

+ Parameters
    + page = `0`(optional, integer) ... Page number
    + max_results = `25`(optional, integer) ... Number of sessions to be returned
    + where (optional, object) ... Filtering
    + sort (optional, object) ... Sorting

+ Response 200 (application/json)

        {
            "_items": [
                {
                    "user": {
                        "first_name": "first name2",
                        "display_name": "first name2 last name2",
                        "role": "5981c6611d41c82dbab9862b",
                        "username": "admin2",
                        "session_preferences": {
                            "5d16bd901d41c81b0df996ce": {
                                "desk:last_worked": "",
                                "stage:items": [],
                                "scratchpad:items": [],
                                "monitoring:view:session": null,
                                "pinned:items": [],
                                "desk:items": []
                            },
                            "5d16bdef1d41c81b0df996cf": {
                                "desk:last_worked": "",
                                "stage:items": [],
                                "monitoring:view:session": null,
                                "scratchpad:items": [],
                                "pinned:items": [],
                                "desk:items": []
                            }
                        },
                        "_updated": "2019-06-29T01:25:03+0000",
                        "is_enabled": true,
                        "_etag": "cb24249236791f8cc4fec865a8dce09e66e0b9e0",
                        "invisible_stages": [
                            "58c132ae1d41c864c216bc01",
                            "58c132ae1d41c864c216bc02"
                        ],
                        "user_preferences": {
                            "spellchecker:status": {
                                "enabled": true,
                                "default": true,
                                "type": "bool"
                            }
                        },
                        "user_type": "administrator",
                        "email": "a2@a.com",
                        "_created": "2017-08-02T12:32:34+0000",
                        "sign_off": "fl",
                        "_id": "5981c6621d41c82dbab98633",
                        "needs_activation": false,
                        "last_name": "last name2",
                        "is_active": true,
                        "_type": "users"
                    },
                    "_created": "2019-06-29T01:25:02+0000",
                    "_id": "5d16bdef1d41c81b0df996cf",
                    "_updated": "2019-06-29T02:27:21+0000",
                    "_etag": "f3a84d4301f348434489cdb7aefbbafeba67e2c9",
                    "_links": {
                        "self": {
                            "title": "Session",
                            "href": "sessions/5d16bdef1d41c81b0df996cf"
                        }
                    }
                },
                {
                    "user": {
                        "user_type": "administrator",
                        "username": "tolga",
                        "_created": "2014-09-02T12:10:45+0000",
                        "email": "akint@aap.com.au",
                        "_id": "5405b3c61d41c872aae70c5e",
                        "_updated": "2014-10-09T02:57:39+0000",
                        "workspace": {
                            "widgets": [
                                {
                                    "configuration": {
                                        "source": "provider",
                                        "colorScheme": "superdesk",
                                        "updateInterval": 5
                                    },
                                    "_id": "ingest-stats",
                                    "sizey": 1,
                                    "sizex": 1,
                                    "row": 1,
                                    "col": 1
                                }
                            ]
                        },
                        "preferences": {
                            "archive:view": {
                                "type": "string",
                                "label": "Test label",
                                "category": "archive",
                                "default": "mgrid",
                                "view": "mgrid"
                            }
                        }
                    },
                    "_etag": "29a9c8d10f5e2cadf8520c17518190832b63b2af",
                    "_links": {
                        "self": {
                            "title": "Session",
                            "href": "/sessions/543de3a41d41c8eea99ddfc7"
                        }
                    },
                    "_created": "2014-10-15T03:01:55+0000",
                    "_id": "543de3a41d41c8eea99ddfc7",
                    "_updated": "2014-10-15T03:01:55+0000"
                }
            ]
        }

+ Response 403

## Session [/sessions/{_id}]

A single Session resource.

+ Parameters
    +   _id (string) ... Session id.

+ Model (application/json)

        {
            "user": {
                "first_name": "first name2",
                "display_name": "first name2 last name2",
                "role": "5981c6611d41c82dbab9862b",
                "username": "admin2",
                "session_preferences": {
                    "5d16bd901d41c81b0df996ce": {
                        "desk:last_worked": "",
                        "stage:items": [],
                        "scratchpad:items": [],
                        "monitoring:view:session": null,
                        "pinned:items": [],
                        "desk:items": []
                    },
                    "5d16bdef1d41c81b0df996cf": {
                        "desk:last_worked": "",
                        "stage:items": [],
                        "monitoring:view:session": null,
                        "scratchpad:items": [],
                        "pinned:items": [],
                        "desk:items": []
                    }
                },
                "is_enabled": true,
                "invisible_stages": [
                    "58c132ae1d41c864c216bc01",
                    "58c132ae1d41c864c216bc02"
                ],
                "user_preferences": {
                    "spellchecker:status": {
                        "enabled": true,
                        "default": true,
                        "type": "bool"
                    }
                },
                "user_type": "administrator",
                "email": "a2@a.com",
                "sign_off": "fl",
                "needs_activation": false,
                "last_name": "last name2",
                "is_active": true,
            },
        }

### Retrieve a Session [GET]

+ Request (application/json)

+ Response 200

    [Session][]

+ Response 404

+ Response 403

### Delete a Session [DELETE]

+ Request

    + Headers

            If-Match: xyz

+ Response 204

+ Response 403


# Group Stage Management

## Stage item [/stages/{id}]

A single stage

+ Parameters
    - id (string, `1`) ... stage identifier.

+ Model (application/json)

        {    
            "id": "54e68ec41024542de76d663f",
            "local_readonly": false,
            "desk": "54e68ec41024542de76d6640",
            "description": "Description of the stage.",
            "task_status": "todo",
            "desk_order": 1,
            "working_stage": true,
            "default_incoming": true,
            "name": "Producer",
            "is_visible": true,
            "content_expiry": 60000,
            "incoming_macro": "macro_name",
            "outgoing_macro": "macro_name",
            "onstage_macro": "macro_name"

        }    

### Update stage [PATCH]

Updates the stage by given id. A stage will fail to update if:

 - If there's no working stage remaining after the update
 - If there's no incoming stage remaining after the update 

+ Request (application/json)

        {"name": "New name", "description": "new description"}

+ Response 200 (application/json)

        {"_status": "OK"}

+ Response 403

### Delete a stage [DELETE]

Deletes the stage by given id. A stage will fail to delete if:

 - It is a working stage
 - Incoming stage
 - There are stories referencing to the stage
 - An ingest routing rule is referencing a stage 

+ Request (application/json)

        {}

+ Response 412

         {"_message": "Cannot delete a Working Stage."}

       

## All Stages [/stages{?page,max_results}]

### Create a stage [POST]

+ Request (application/json)

        {
            "name": "test stage",
            "description": "Shows all items for the current workflow stage",
            "default_incoming": "false",
            "desk": "53c79018ea8e15145ff9863f",
        }

+ Response 201 (application/json)

        {
            "_links": {"self": {"href": "/stages/2"}},
            "_status": "OK"
        }

### List stages [GET]

+ Parameters
    + page = `1`(optional, integer) ... Page number
    + max_results = `25`(optional, integer) ... Number of items to be returned

+ Response 200 (application/json)

        {
            "_items": [
                {
                    "_links": {"self": {"href": "/stages/1"}},
                    "name": "test stage",
                    "_updated": "2014-08-21T11:29:09+0000",
                    "_id": "53f5d805ea8e1511bba1648e",
                    "description": "Shows all items for the current workflow stage",
                    "_created": "2014-08-21T11:29:09+0000",
                    "default_incoming": "false",
                    "desk": "53c79018ea8e15145ff9863f",
                    
                },
                {
                    "_links": {"self": {"href": "/stages/2"}},
                    "name": "test stage 2",
                    "_updated": "2014-08-21T11:29:09+0000",
                    "_id": "53f5d805ea8e4511bba1648e",
                    "_created": "2014-08-21T11:29:09+0000",
                    "description": "Shows all items with no exception",
                    "default_incoming": "false",
                    "desk": "53c79018ea8e15145ff9863f",
                }
            ]
        }


# Group Desk Management

## Desks item [/desks/{desk_id}]

A single Desks resource

+ Parameters
    - desk_id (string, `1`) ... Desks item identifier.
    
+ Model (application/json)

        {
            "incoming_stage": "54e691ca1024542de640fef0",
            "content_profiles": {},
            "source": "Reuters",
            "desk_type": "production",
            "desk_metadata": {},
            "desk_language": "",
            "description": "Content automatically routed to the desk",
            "members": [
                {
                    "user": "54ed94da10245479ccc383f3"
                },
                {
                    "user": "54ed955910245479d505d2a3"
                }
            ],
            "name": "Finance",
            "id": "54e691ca1024542de640fef1",
            "working_stage": "54e691ca1024542de640fef0",
            "content_expiry": 2,
            "monitoring_settings": [
                {
                    "id": "54e691ca1024542de640fef0",
                    "max_items": 10,
                    "type": "stage"
                },
                {
                    "id": "54e6a3c31024542ddeb76b03",
                    "max_items": 10,
                    "type": "stage"
                },
                {
                    "id": "54e691ca1024542de640fef1:output",
                    "max_items": 10,
                    "type": "deskOutput"
                },
                {
                    "id": "58bb64271d41c8ce98696fc5",
                    "max_items": 10,
                    "type": "search"
                }
            ],
            "monitoring_default_view": {
                "type": "string",
                "allowed": ["", "list", "swimlane", "photogrid"],
                "required": False
            },
            "default_content_profile": "32dewd32414d2e",
            "default_content_template": "3423lkl234i324023493ss,
            "slack_channel_name": "desk_channel",
            "preferred_cv_items": {
                "categories": [
                    {
                        "translations": null,
                        "qcode": "d",
                        "scheme": null,
                        "subject": "finance",
                        "name": "finance"
                    }
                ]
            },
            "preserve_published_content": false
        },
    
### Retrieve a Desk [GET]

+ Response 200

    [Desks item][]

+ Response 404

### Update Desk [PATCH]

Updates the desk by given id. A desk will fail to update if:

 - If desk type is updated but there are items assigned to desk

+ Request (application/json)
    
        {"name": "Foo"}

+ Response 200 (application/json)

        {"_status": "OK"}

+ Response 403

### Delete a Desk [DELETE]

Deletes the desk by given id. A desk will fail to delete if:

 - It is assigned as default desk to a user
 - There is a routing rule referencing to the desk
 - There are items in the desk

+ Request (application/json)

        {}

+ Response 412


## Desks collection [/desks{?page,max_results}]

### Create desk [POST]

+ Request (application/json)

        {
            "name": "Foo"
        }

+ Response 201 (application/json)

        {
            "_links": {"self": {"href": "/desks/2"}},
            "_status": "OK"
        }

### List all desks [GET]

+ Parameters
    + page = `1`(optional, integer) ... Page number
    + max_results = `25`(optional, integer) ... Number of items to be returned
    
+ Response 200 (application/json)

        {
            "_items": [
                {
                    "_created": "2014-07-15T09:35:18+0000",
                    "_id": "53c4f5d6ea8e15141784df1a",
                    "_links": {"self": {"href": "/desks/1"}},
                    "_updated": "2014-07-17T06:44:58+0000",
                    "members": [{"user": "53c76e39ea8e150dc0fd8578"}],
                    "name": "Admin desk",
                    "spike_expiry": 60
                },
                {
                    "_created": "2014-07-17T06:33:49+0000",
                    "_id": "53c76e4dea8e150dc0fd8579",
                    "_links": {"self": {"href": "/desks/2"}},
                    "_updated": "2014-07-17T06:34:00+0000",
                    "members": [{"user": "53c76e39ea8e150dc0fd8578"}, {"user": "53c4f366ea8e15141784de99"}],
                    "name": "My desk",
                    "spike_expiry": 360
                }
            ]
        }

## User desks [/users/{user_id}/desks]

+ Parameters
    - user_id (string) ... User id.

### List the desks for given users [GET]

+ Response 200 (application/json)

        {
            "_items": [
                {
                    "incoming_stage": "5c5138d4bfb76600df081b35",
                    "default_content_profile": "5c513911bfb76600df081b3c",
                    "monitoring_default_view": "list",
                    "content_profiles": {},
                    "desk_type": "production",
                    "desk_metadata": {},
                    "_id": "5c5138d4bfb76600df081b36",
                    "members": [
                        {
                            "user": "5ab1aabdcdfe38019f0a875a"
                        },
                        {
                            "user": "5ab3cb94cdfe3800e091fdc1"
                        }
                    ],
                    "name": "AMNA",
                    "working_stage": "5c5138d4bfb76600df081b35",
                    "source": "AMNA",
                    "content_expiry": null,
                    "description": "News desk",
                    "default_content_template": "5c513911bfb76600df081b3e"
                }
            ]
        }

## Desk Sluglines [/desks/{desk_id}/sluglines]

Returns a summary of the sluglines and headlines published from the given
desk in the last 24 hours.

+ Parameters
    - desk_id (string) ... Desk id.

### List the sluglines published from a desk [GET]

+ Response 200 (application/json)

        {
            "_items": [
                {
                    "place": "Domestic",
                    "items": [
                        {"headline": "one", "slugline": "slugline1", "name": "Domestic", "old_sluglines": []},
                        {"headline": "two", "slugline": "slugline2", "name": "Domestic", "old_sluglines": []}
                    ]
                },
                {
                    "place": "EUR",
                    "items": [
                        {"headline": "three", "slugline": "slugline3", "name": "EUR", "old_sluglines": []}
                    ]
                }
            ]
        }


# Group Vocabularies

<!-- include(endpoints/configuration/vocabularies.apib) -->

# Group Routing Schemes

<!-- include(endpoints/configuration/routing-schemes.apib) -->

# Group Dictionaries

<!-- include(endpoints/configuration/dictionaries.apib) -->

# Group Rule Sets

<!-- include(endpoints/configuration/rule-sets.apib) -->

# Group Audits

<!-- include(endpoints/configuration/audits.apib) -->

# Group Validators

<!-- include(endpoints/configuration/validators.apib) -->

# Group Workspaces

<!-- include(endpoints/configuration/workspaces.apib) -->

# Group Concept Items

<!-- include(endpoints/configuration/concept-items.apib) -->

# Group Allowed Values

<!-- include(endpoints/configuration/allowed-values.apib) -->

# Group Backend Meta

<!-- include(endpoints/configuration/backend-meta.apib) -->

# Group Closed Desks

<!-- include(endpoints/configuration/closed-desks.apib) -->

# Group Content Templates

<!-- include(endpoints/configuration/content-templates.apib) -->

# Group Search Providers

<!-- include(endpoints/configuration/search-providers.apib) -->